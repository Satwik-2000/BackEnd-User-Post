let DB,PORT,success,error,typeDefs,resolvers;_68e‍.w("./config",[["DB",["DB"],function(v){DB=v}],["PORT",["PORT"],function(v){PORT=v}]]);_68e‍.w("consola",[["success",["success"],function(v){success=v}],["error",["error"],function(v){error=v}]]);_68e‍.w("./graphql",[["typeDefs",["typeDefs"],function(v){typeDefs=v}],["resolvers",["resolvers"],function(v){resolvers=v}]]);const express = require('express');
const { ApolloServer, gql } = require('apollo-server-express');




const { Pool, Client } = require('pg');


var dbConnectionConfig = { host:config.DB.host, user:config.DB.username, password:config.DB.password, database:config.DB.database };
var dbWrapper = new DBWrapper('pg', dbConnectionConfig);
dbWrapper.connect();



const server = new ApolloServer({ 
    typeDefs, 
    resolvers, 
});

const app = express();
const startApp = async() => {
    //Inject apollo server middleware on Express Application
    await server.start();
    server.applyMiddleware({app});
    app.listen(PORT, () => success({
        badge: true, 
        message: `Server started on PORT ${PORT}` 
    }));
}

startApp();